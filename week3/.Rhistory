#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Corrected a missing ')'
plot(IrisDataset$Sepal.Length)
#Added a variable to the dataframe to plot
qqnorm(IrisDataset$Sepal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected type
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
#loads readr package
library("readr","ggplot")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Corrected a missing ')'
plot(IrisDataset$Sepal.Length)
#Added a variable to the dataframe to plot
qqnorm(IrisDataset$Sepal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected type
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
library("ggplot2")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
#loads readr & ggplot2 package
library("readr")
library("ggplot2")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Corrected a missing ')'
plot(IrisDataset$Sepal.Length)
#Added a variable to the dataframe to plot
qqnorm(IrisDataset$Sepal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected type
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
#loads readr & ggplot2 package
library("readr")
library("ggplot2")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
IrisDataset$Sepal.Length
IrisDataset$Species
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
sr(IrisDataset)
str(IrisDataset)
#loads readr & ggplot2 package
library("readr")
library("ggplot2")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Not sure what we're trying to do here. Barplot would seem more appropriate for a categorical variable
#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Corrected a missing ')', and changed to Petal
plot(IrisDataset$Petal.Length)
#Corrected a missing ')', and changed to Petal
plot(IrisDataset$Petal.Length)
#Added a variable to the dataframe to plot , and changed to Petal
qqnorm(IrisDataset$Petal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected typo
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
#loads readr & ggplot2 package
library("readr")
library("ggplot2")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Corrected a missing ')', and changed to Petal
plot(IrisDataset$Petal.Length)
#Added a variable to the dataframe to plot , and changed to Petal
qqnorm(IrisDataset$Petal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected typo
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length), color = IrisDataset$Species) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length), colour = IrisDataset$Species) + geom_point() + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
plot(g)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
G <- g + scale_color_manual(cbbPalette)
g <- g + scale_color_manual(cbbPalette)
plot(g)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
g <- g + scale_color_manual(values = cbbPalette)
plot(g)
+ labs(title = "Petal.width(X) vs. Petal.Length(y)",
y = "Petal.Length", x = "Petal.width")
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
g
g <- g + scale_color_manual(values = cbbPalette)
g
g <- g + scale_color_discrete(values = cbbPalette)
g
g <- ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
g
source('~/Ubiqum/projects/week3/R/iris.R')
#loads readr & ggplot2 package
library("readr")
library("ggplot2")
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#The statements below just print information
attributes(IrisDataset)
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
names(IrisDataset)
#Corrected a missing ')', and changed to Petal
plot(IrisDataset$Petal.Length)
#Not sure what we're trying to do here. Barplot would seem more appropriate for a categorical variable
#Prior to the hist statement, we need to covert the Species column to numeric
#IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Not sure what we're trying to do here. Barplot would seem more appropriate for a categorical variable
#Prior to the hist statement, we need to covert the Species column to numeric
IrisDataset$Species <- as.numeric(IrisDataset$Species)
hist(IrisDataset$Species)
#Corrected a missing ')', and changed to Petal
plot(IrisDataset$Petal.Length)
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#Added a variable to the dataframe to plot , and changed to Petal
qqnorm(IrisDataset$Petal.Length)
#No changes
IrisDataset$Species<- as.numeric(IrisDataset$Species)
set.seed(123)
#Training set seems a bit low, leaving it as is for now
trainSize <- round(nrow(IrisDataset) * 0.7)
#changed variable from trainSet to trainSize
testSize <- nrow(IrisDataset) - trainSize
#Corrected typo
trainSize
testSize
#Create new line to create training_indices
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#Corrected testingSet in trainSet, as the model need to train on its own observations.
#Furthermore, needed to add the trainSet separate to avoid warning message while predicting
#Also, the dependent variable should be Length, not width.
LinearModel<- lm(Petal.Length ~ Petal.Width, trainSet)
summary(LinearModel)
#Added comma
prediction<-predict(LinearModel, testSet)
#Corrected typo
prediction
#Added csv write
write.csv(prediction, "./output/irispred.csv")
ggplot(IrisDataset, aes(x=IrisDataset$Petal.Width, y = IrisDataset$Petal.Length)) + geom_point(aes(colour=IrisDataset$Species)) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
g <- ggplot(IrisDataset, aes(x=Petal.Width, y = Petal.Length)) + geom_point(aes(colour=as.factor(Species))) + geom_smooth(method="lm", se = FALSE) + labs(title = "Petal.width(X) vs. Petal.Length(y)", y = "Petal.Length", x = "Petal.width")
g
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g <- g + scale_color_manual(values = cbbPalette)
g
#adjusted to load from the right location in my project folder + added quotes
IrisDataset <- read.csv('./input/iris.csv')
#Corrected a typo in variable name
summary(IrisDataset)
#Corrected a type in variable name
str(IrisDataset)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
source('~/Ubiqum/projects/week3/R/iris.R')
source('~/Ubiqum/projects/week3/R/iris.R')
source('~/Ubiqum/projects/week3/R/iris.R')
source('~/Ubiqum/projects/week3/R/iris.R')
source('~/Ubiqum/projects/week3/R/cars_intro.R')
source('~/Ubiqum/projects/week3/R/cars_intro.R')
lmmodel
#import libraries
library("readr")
#import data
plantsData <- read.csv('./input/exercise.csv')
plantsData
#remove observations with NA in 'Species'
plantsData <- plantsData[-is.na(plantsData$Species)]
plantsData
plantsData[1:3]
plantsData[1:2]
plantsData[1:3, is.na()]
plantsData[1:3, is.na(plantsData[1:3])]
is.na(plantsData[1:3])
#remove observations with NA in 'Species'
#plantsData <- plantsData[-is.na(plantsData$Species)]
plantsData[is.na(plantsData[1:3])]
mean(plantsData, na.rm = TRUE)
mean(plantsData[1:3], na.rm = TRUE)
plantsData[1:3]
plantsData[2:3]
plantsData[1:3]
mean(plantsData[1], na.rm = TRUE)
summary(plantsData)
str(plantsData)
mean(plantsData[2], na.rm = TRUE)
mean(plantsData[1], na.rm = TRUE)
plantsData[1]
mean(plantsData[1])
mean(plantsData[1], na.rm = TRUE)
plantsData [1]
mean(plantsData[1], na.rm = TRUE)
mean(plantsData$Sepal.Width, na.rm = TRUE)
mean(plantsData[,1], na.rm = TRUE)
plantsData [1]
plantsData [,1]
mean(plantsData[,1:3], na.rm = TRUE)
mean(plantsData[,c(1:3)], na.rm = TRUE)
mean(plantsData[,(1:3)], na.rm = TRUE)
mean(plantsData[(1:3)], na.rm = TRUE)
apply(plantsData, 2, mean)
apply(plantsData, 2, mean(na.rm = T))
apply(plantsData, 2, mean(x, na.rm = T))
apply(plantsData, 2, function(x) mean(x, na.rm = T))
apply(plantsData, 2, function(x) mean(x), na.rm = T)
apply(plantsData, 2, sum)
apply(plantsData[1:3], 2, sum)
apply(plantsData[1:3], 2, sum(na.rm = T))
summary(plantsData)
lapply(plantsData, mean)
lapply(plantsData, mean(na.rm = T))
sapply(plantsData, mean(na.rm = T))
colMeans(plantsData, na.rm = T)
colMeans(plantsData[1:3], na.rm = T)
#colMeans(plantsData[1:3], na.rm = T)
x <- plantsData[1:3]
x
dat[,as.data.table(apply(.SD, 2, function(x) {x[is.na(x)] <- mean(x, na.rm=T); x})),by=id]
x[,as.data.table(apply(.SD, 2, function(x) {x[is.na(x)] <- mean(x, na.rm=T); x})),by=id]
#colMeans(plantsData[1:3], na.rm = T)
dat <- plantsData[1:3]
## determine the column names that contain NA values
nm <- names(dat)[colSums(is.na(dat)) != 0]
## replace with the mean - by 'id'
dat[, (nm) := lapply(nm, function(x) {
x <- get(x)
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
}), by = id]
#colMeans(plantsData[1:3], na.rm = T)
tomean <- plantsData[1:3]
dat[, (tomean) := lapply(tomean, function(x) {
x <- get(x)
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
}), by = id]
plantsData
dat[, (tomean) := lapply(tomean, function(x) {
x <- get(x)
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})]
#colMeans(plantsData[1:3], na.rm = T)
data <- plantsData
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
#colMeans(plantsData[1:3], na.rm = T)
data <- plantsData[1:3]
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
data
m <- plantsData
k <- which(is.na(m), arr.ind=TRUE)
m[k] <- rowMeans(m, na.rm=TRUE)[k[,1]]
m <- plantsData[1:3]
k <- which(is.na(m), arr.ind=TRUE)
m[k] <- rowMeans(m, na.rm=TRUE)[k[,1]]
m <- plantsData[1:3]
k <- which(is.na(m), arr.ind=TRUE)
m[k] <- colMeans(m, na.rm=TRUE)[k[,1]]
data == m
m
k
k[,1]
colMeans(m, na.rm=T)
k[1,]
k[1]
k[,1]
k
k[,1]
m <- plantsData[1:3]
k <- which(is.na(m), arr.ind=TRUE)
m[k] <- colMeans(m, na.rm=TRUE)k
k <- which(is.na(m), arr.ind=TRUE)
m[k] <- colMeans(m, na.rm=TRUE)[k]
m[k] <- colMeans(m, na.rm=TRUE)[k[,1]]
m
plantsDatacopy <- plantsData
cM <- colMeans(plantsData, na.rm=TRUE)
plantsDatasub <- plantsData
cM <- colMeans(plantsDatasub, na.rm=TRUE)
plantsDatasub <- plantsData[1:3]
cM <- colMeans(plantsDatasub, na.rm=TRUE)
indx <- which(is.na(plantsDatasub), arr.ind=TRUE)
plantsDatasub[indx] <- cM[indx[,2]]
plantsDatasub
?indx
cM
indx
cM <- colMeans(plantsDatasub, na.rm=TRUE)
indx <- which(is.na(plantsDatasub), arr.ind=TRUE)
indx
indx
plantsDatasub <- plantsData[1:3]
cM <- colMeans(plantsDatasub, na.rm=TRUE)
indx <- which(is.na(plantsDatasub), arr.ind=TRUE)
indx
View(plantsDatasub)
View(plantsDatasub)
indx[,2]
indx[,1]
indx[1,]
indx[,2]
cM[indx[,2]]
plantsDatasub[indx]
View(plantsDatasub)
plantsDatasub[1,1]
plantsDatasub[23,1]
plantsDatasub[23,2]
plantsDatasub[23,3]
plantsDatasub[23,]
plantsDatasub[1:3][23,]
plantsDatasub[1:2][23,]
plantsDatasub <- plantsData
cM <- colMeans(plantsDatasub[1:3], na.rm=TRUE)
indx <- which(is.na(plantsDatasub[1:3]), arr.ind=TRUE)
plantsDatasub[1:3][indx] <- cM[indx[,2]]
plantsDatasub
m <- matrix(data=cbind(rnorm(30, 0), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 2, function(x) length(x[x<0]))
apply(m, 2, function(x) length(x[x<0]))
apply(m[1:2], 2, mean)
m[1:2]
m[,1:2]
apply(m[,1:2], 2, mean)
m[1:2,]
